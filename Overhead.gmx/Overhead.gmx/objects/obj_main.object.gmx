<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_main_up</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vx = 0;
vy = 0;
player_speed = 6;
timer = 0;
state = "IDLE";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// movement

anim_speed = 0.2;
switch (state) {
    case "IDLE": {
        image_speed = 0;
        vx = 0;
        vy = 0;
        if (Input.up) state = "UP";
        if (Input.down) state = "DOWN";
        if (Input.left) state = "LEFT";
        if (Input.right) state = "RIGHT";
        if (!Input.up &amp;&amp; !Input.down &amp;&amp; !Input.left &amp;&amp; !Input.right) state = "IDLE";
        
        
        break;
    }
    case "UP": {
        image_speed = anim_speed;
        sprite_index = spr_main_up;
        if (Input.up) state = "UP";
        if (Input.down) state = "DOWN";
        if (Input.left) state = "LEFT";
        if (Input.right) state = "RIGHT";
        if (!Input.up &amp;&amp; !Input.down &amp;&amp; !Input.left &amp;&amp; !Input.right) state = "IDLE";
        
        vx = 0;
        vy = -1 * player_speed;
        
        break;
    }
    case "DOWN": {
        image_speed = 0;
        image_index = 0;
        sprite_index = spr_main_down;
        if (Input.up) state = "UP";
        if (Input.down) state = "DOWN";
        if (Input.left) state = "LEFT";
        if (Input.right) state = "RIGHT";
        if (!Input.up &amp;&amp; !Input.down &amp;&amp; !Input.left &amp;&amp; !Input.right) state = "IDLE";
        
        vx = 0;
        vy = player_speed;
        
        break;
    }
    case "LEFT": {
        image_speed = anim_speed;
        sprite_index = spr_main_side;
        image_xscale = -1;
        
        if (Input.up) state = "UP";
        if (Input.down) state = "DOWN";
        if (Input.left) state = "LEFT";
        if (Input.right) state = "RIGHT";
        if (!Input.up &amp;&amp; !Input.down &amp;&amp; !Input.left &amp;&amp; !Input.right) state = "IDLE";
        
        vx = -1 * player_speed;
        vy = 0;
        
        break;
    }
    case "RIGHT": {
        image_speed = anim_speed;
        sprite_index = spr_main_side;
        image_xscale = 1;
        
        if (Input.up) state = "UP";
        if (Input.down) state = "DOWN";
        if (Input.left) state = "LEFT";
        if (Input.right) state = "RIGHT";
        if (!Input.up &amp;&amp; !Input.down &amp;&amp; !Input.left &amp;&amp; !Input.right) state = "IDLE";
        
        vx = player_speed;
        vy = 0;
        
        break;
    }

}

left = keyboard_check(vk_left);
right = keyboard_check(vk_right);
up = keyboard_check(vk_up);
down = keyboard_check(vk_down);
button_b = keyboard_check_pressed(vk_enter);;
button_a = keyboard_check_pressed(vk_space);

vx = (right - left) * player_speed;
vy = (down - up) * player_speed;

/// check for collision
repeat ( abs(vx) ) {
    if ( !place_meeting(x + sign(vx), y, obj_solid) ) {
        x += sign(vx);
    } else {
        break;
    }
}

repeat ( abs(vy) ) {
    if ( !place_meeting(x , y + sign(vy), obj_solid) ) {
        y += sign(vy);
    } else {
        break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
